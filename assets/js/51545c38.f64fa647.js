"use strict";(self.webpackChunkpass4s=self.webpackChunkpass4s||[]).push([[579],{5680:(e,r,n)=>{n.d(r,{xA:()=>l,yg:()=>m});var o=n(6540);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function s(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?s(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,o,t=function(e,r){if(null==e)return{};var n,o,t={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var c=o.createContext({}),p=function(e){var r=o.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},l=function(e){var r=p(e.components);return o.createElement(c.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},g=o.forwardRef((function(e,r){var n=e.components,t=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),g=t,m=u["".concat(c,".").concat(g)]||u[g]||d[g]||s;return n?o.createElement(m,a(a({ref:r},l),{},{components:n})):o.createElement(m,a({ref:r},l))}));function m(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var s=n.length,a=new Array(s);a[0]=g;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[u]="string"==typeof e?e:t,a[1]=i;for(var p=2;p<s;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7866:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var o=n(8168),t=(n(6540),n(5680));const s={sidebar_position:1,description:"Message processor"},a="Message processor",i={unversionedId:"modules/message-processor",id:"modules/message-processor",title:"Message processor",description:"Message processor",source:"@site/../mdoc/target/mdoc/modules/message-processor.md",sourceDirName:"modules",slug:"/modules/message-processor",permalink:"/pass4s/docs/modules/message-processor",draft:!1,editUrl:"https://github.com/ocadotechnology/pass4s/edit/main/docs/modules/message-processor.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Message processor"},sidebar:"sidebar",previous:{title:"Broker",permalink:"/pass4s/docs/core-concepts/Broker"},next:{title:"S3 Proxy",permalink:"/pass4s/docs/modules/s3proxy"}},c={},p=[],l={toc:p},u="wrapper";function d(e){let{components:r,...n}=e;return(0,t.yg)(u,(0,o.A)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"message-processor"},"Message processor"),(0,t.yg)("p",null,"Message processor provides a convenient way for building rich consumer, binding it to broker and attaching message handling logic."),(0,t.yg)("p",null,"The usual flow of building processor starts with initialization"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"val processor = MessageProcessor.init[IO]\n")),(0,t.yg)("p",null,"Where the ",(0,t.yg)("inlineCode",{parentName:"p"},"IO")," can be replaced with the effect of your preference. Once initialized, you can enrich the underlying consumer by subsequent ",(0,t.yg)("inlineCode",{parentName:"p"},"enrich")," calls."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"val richProcessor = \n  processor\n    .enrich(_.logged)\n    .enrich(_.usingS3Proxy(consumerConfig))\n    .enrich(_.asJsonConsumer[String])\n")),(0,t.yg)("p",null,"Then depending on your logic you can go either with ",(0,t.yg)("inlineCode",{parentName:"p"},"transact")," if you use different effect or ",(0,t.yg)("inlineCode",{parentName:"p"},"effectful")," if you want to stick to ",(0,t.yg)("inlineCode",{parentName:"p"},"IO")," in our example. After that you bind the broker and provide the message handling logic. Keep in mind that you can reuse once prepared processor like in the example below."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"val processor = \n  MessageProcessor\n    .init[IO]\n    .enrich(_.logged)\n    .enrich(_.asJsonConsumer[String])\n    .transacted(runEffect)\n    .bindBroker(broker)\n\nprocessor.handle(Destinations.destinationA)(MyProcessor.instanceA[AppEffect])\nprocessor.handle(Destinations.destinationB)(MyProcessor.instanceB[AppEffect])\n")))}d.isMDXComponent=!0}}]);