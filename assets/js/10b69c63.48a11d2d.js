"use strict";(self.webpackChunkpass4s=self.webpackChunkpass4s||[]).push([[74],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(t),u=r,g=d["".concat(c,".").concat(u)]||d[u]||m[u]||s;return t?o.createElement(g,a(a({ref:n},p),{},{components:t})):o.createElement(g,a({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,a=new Array(s);a[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[d]="string"==typeof e?e:r,a[1]=i;for(var l=2;l<s;l++)a[l]=t[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1976:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const s={sidebar_position:1},a="Sender",i={unversionedId:"core-concepts/Sender",id:"core-concepts/Sender",title:"Sender",description:"Sender is a basic abstraction over the possibility to send single message. Its simplified definition looks like this:",source:"@site/../mdoc/target/mdoc/core-concepts/Sender.md",sourceDirName:"core-concepts",slug:"/core-concepts/Sender",permalink:"/pass4s/docs/core-concepts/Sender",draft:!1,editUrl:"https://github.com/ocadotechnology/pass4s/edit/main/docs/core-concepts/Sender.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sidebar",previous:{title:"Getting started",permalink:"/pass4s/docs/getting-started"},next:{title:"Consumer",permalink:"/pass4s/docs/core-concepts/Consumer"}},c={},l=[],p={toc:l},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sender"},"Sender"),(0,r.kt)("p",null,"Sender is a basic abstraction over the possibility to send single message. Its simplified definition looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait Sender[F[_], -A] extends (A => F[Unit]) with Serializable {\n\n  /** Sends a single message.\n    */\n  def sendOne(msg: A): F[Unit]\n\n  /** Alias for [[sendOne]]. Thanks to this, you can pass a Sender where a function type is expected.\n    */\n  def apply(msg: A): F[Unit] = sendOne(msg)\n\n}\n")),(0,r.kt)("p",null,"As you can see ",(0,r.kt)("inlineCode",{parentName:"p"},"Sender")," is basically a type of function of ",(0,r.kt)("inlineCode",{parentName:"p"},"A => F[Unit]")," shape. It comes with many combinators for mapping, filtering and combining ",(0,r.kt)("inlineCode",{parentName:"p"},"Sender"),"s, as well as ",(0,r.kt)("inlineCode",{parentName:"p"},"Functor")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Monoid")," instances."),(0,r.kt)("p",null,"Please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ocadotechnology/pass4s/blob/main/kernel/src/main/scala/com/ocadotechnology/pass4s/kernel/Sender.scala"},(0,r.kt)("inlineCode",{parentName:"a"},"Sender.scala")," sources")," and the scaladocs."),(0,r.kt)("p",null,"The typical way of obtaining a ",(0,r.kt)("inlineCode",{parentName:"p"},"Sender")," instance is by instantiating the ",(0,r.kt)("a",{parentName:"p",href:"Broker"},"Broker")," first."),(0,r.kt)("h1",{id:"basic-example"},"Basic example"),(0,r.kt)("p",null,"Here's a simple sender implementation configured to use with our ",(0,r.kt)("a",{parentName:"p",href:"../localstack"},"localstack setup"),". If you want to run it locally, simply save the file somewhere and run it using ",(0,r.kt)("a",{parentName:"p",href:"https://scala-cli.virtuslab.org/install"},"scala-cli")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"scala-cli run filename.scala")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'//> using scala "2.13"\n//> using lib "com.ocadotechnology::pass4s-kernel:0.3.1"\n//> using lib "com.ocadotechnology::pass4s-core:0.3.1"\n//> using lib "com.ocadotechnology::pass4s-high:0.3.1"\n//> using lib "com.ocadotechnology::pass4s-connector-sns:0.3.1"\n//> using lib "org.typelevel::log4cats-noop:2.5.0"\n\nimport cats.effect.ExitCode\nimport cats.effect.IO\nimport cats.effect.IOApp\nimport cats.implicits._\nimport com.ocadotechnology.pass4s.connectors.sns.SnsArn\nimport com.ocadotechnology.pass4s.connectors.sns.SnsConnector\nimport com.ocadotechnology.pass4s.connectors.sns.SnsDestination\nimport com.ocadotechnology.pass4s.core.Message\nimport com.ocadotechnology.pass4s.core.Source\nimport com.ocadotechnology.pass4s.high.Broker\nimport org.typelevel.log4cats.Logger\nimport org.typelevel.log4cats.LoggerFactory\nimport org.typelevel.log4cats.noop.NoOpLogger\nimport software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider\nimport software.amazon.awssdk.auth.credentials.AwsBasicCredentials\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider\nimport software.amazon.awssdk.auth.credentials.StaticCredentialsProvider\nimport software.amazon.awssdk.regions.Region\n\nimport java.net.URI\n\nobject Producer extends IOApp {\n\n  override def run(args: List[String]): IO[ExitCode] = {\n    implicit val ioLogger: Logger[IO] = NoOpLogger[IO]\n\n    // Initialize credentials\n    val awsCredentials = AwsBasicCredentials.create("test", "AWSSECRET");\n    val snsDestination = SnsDestination(SnsArn("arn:aws:sns:eu-west-2:000000000000:local_sns"))\n    val localstackURI = new URI("http://localhost:4566")\n\n    val credentialsProvider = StaticCredentialsProvider.create(awsCredentials)\n\n    // Create connector resource using provided credentials \n    val snsConnector =\n      SnsConnector.usingLocalAwsWithDefaultAttributesProvider[IO](localstackURI, Region.EU_WEST_2, credentialsProvider)\n\n    snsConnector.use { connector => // obtain the connector resource\n      val broker = Broker.fromConnector(connector)\n\n      val message = Message(Message.Payload("hello world!", Map()), snsDestination)\n\n      IO.println(s"Sending message $message to $snsDestination") *>\n        broker.sender.sendOne(message) *> // use the sender to send one message\n        IO.println("Sent, exiting!").as(ExitCode.Success)\n    }\n  }\n}\n')))}m.isMDXComponent=!0}}]);