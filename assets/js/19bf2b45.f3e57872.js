"use strict";(self.webpackChunkpass4s=self.webpackChunkpass4s||[]).push([[391],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return t?r.createElement(y,a(a({ref:n},c),{},{components:t})):r.createElement(y,a({ref:n},c))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1594:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=t(7462),o=(t(7294),t(3905));const s={sidebar_position:2,description:"Using S3 proxy for large messages"},a="S3 Proxy",i={unversionedId:"modules/s3proxy",id:"modules/s3proxy",title:"S3 Proxy",description:"Using S3 proxy for large messages",source:"@site/../mdoc/target/mdoc/modules/s3proxy.md",sourceDirName:"modules",slug:"/modules/s3proxy",permalink:"/pass4s/docs/modules/s3proxy",draft:!1,editUrl:"https://github.com/ocadotechnology/pass4s/edit/main/docs/modules/s3proxy.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Using S3 proxy for large messages"},sidebar:"sidebar",previous:{title:"Message processor",permalink:"/pass4s/docs/modules/message-processor"},next:{title:"JSON",permalink:"/pass4s/docs/modules/json"}},l={},p=[],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"s3-proxy"},"S3 Proxy"),(0,o.kt)("p",null,"Some messaging solutions like SNS/SQS limit the size of the message you can send. S3 proxy solves this particular problem by sending the original payload to S3 bucket and exchanging the pointer to the S3 object on the messaging channel.  "),(0,o.kt)("p",null,"The example below roughly shows how to use the S3 proxy on both consumer and sender."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val senderConfig =\n  S3ProxyConfig\n    .Sender\n    .withSnsDefaults(bucketName)\n    // .copy(\n    //   minPayloadSize = Some(0) // You can use custom payload size\n    // )\nval consumerConfig =\n  S3ProxyConfig\n    .Consumer\n    .withSnsDefaults()\n    .copy(\n      shouldDeleteAfterProcessing = true // it doesn\'t by default, just in case there\'s more listeners\n    )\nval broker = ??? // let\'s just assume you already instantiated broker\nval payload = Message.Payload("body", Map("foo" -> "bar"))\n\nval sender = \n  broker\n    .sender\n    .usingS3Proxy(senderConfig)\nval consumer = \n  broker\n    .consumer(SqsEndpoint(SqsUrl(queueUrl)))\n    .usingS3Proxy(consumerConfig)\n\n// no need to know anything about s3 when sending the actual message\nval sendMessageOnTopic = sender.sendOne(Message(payload, SnsDestination(SnsArn(topicArn))).widen)\n')),(0,o.kt)("p",null,"Please note that for this to work you need to have an existing s3 bucket, pass4s doesn't create any AWS resources on it's own. If you are using the ",(0,o.kt)("a",{parentName:"p",href:"../localstack"},"provided localstack setup")," you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"s3://large-messages")," bucket as a playground."),(0,o.kt)("p",null,"For more detailed examples on s3 proxy, you might want to check out the following article ",(0,o.kt)("a",{parentName:"p",href:"https://blog.michalp.net/posts/scala/pass4s-s3-proxy/"},"https://blog.michalp.net/posts/scala/pass4s-s3-proxy/")))}d.isMDXComponent=!0}}]);