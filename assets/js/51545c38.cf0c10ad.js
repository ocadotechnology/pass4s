"use strict";(self.webpackChunkpass4s=self.webpackChunkpass4s||[]).push([[300],{3905:(e,r,n)=>{n.d(r,{Zo:()=>l,kt:()=>f});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function s(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?s(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=t.createContext({}),p=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},l=function(e){var r=p(e.components);return t.createElement(c.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||s;return n?t.createElement(f,a(a({ref:r},l),{},{components:n})):t.createElement(f,a({ref:r},l))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=m;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=n[p];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2898:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var t=n(7462),o=(n(7294),n(3905));const s={sidebar_position:1,description:"Message processor"},a="Message processor",i={unversionedId:"modules/message-processor",id:"modules/message-processor",title:"Message processor",description:"Message processor",source:"@site/../mdoc/target/mdoc/modules/message-processor.md",sourceDirName:"modules",slug:"/modules/message-processor",permalink:"/pass4s/docs/modules/message-processor",draft:!1,editUrl:"https://github.com/ocadotechnology/pass4s/edit/main/docs/modules/message-processor.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Message processor"},sidebar:"sidebar",previous:{title:"Broker",permalink:"/pass4s/docs/core-concepts/Broker"},next:{title:"S3 Proxy",permalink:"/pass4s/docs/modules/s3proxy"}},c={},p=[],l={toc:p},u="wrapper";function d(e){let{components:r,...n}=e;return(0,o.kt)(u,(0,t.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"message-processor"},"Message processor"),(0,o.kt)("p",null,"Message processor provides a convenient way for building rich consumer, binding it to broker and attaching message handling logic."),(0,o.kt)("p",null,"The usual flow of building processor starts with initialization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"val processor = MessageProcessor.init[IO]\n")),(0,o.kt)("p",null,"Where the ",(0,o.kt)("inlineCode",{parentName:"p"},"IO")," can be replaced with the effect of your preference. Once initialized, you can enrich the underlying consumer by subsequent ",(0,o.kt)("inlineCode",{parentName:"p"},"enrich")," calls."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"val richProcessor = \n  processor\n    .enrich(_.logged)\n    .enrich(_.usingS3Proxy(consumerConfig))\n    .enrich(_.asJsonConsumer[String])\n")),(0,o.kt)("p",null,"Then depending on your logic you can go either with ",(0,o.kt)("inlineCode",{parentName:"p"},"transact")," if you use different effect or ",(0,o.kt)("inlineCode",{parentName:"p"},"effectful")," if you want to stick to ",(0,o.kt)("inlineCode",{parentName:"p"},"IO")," in our example. After that you bind the broker and provide the message handling logic. Keep in mind that you can reuse once prepared processor like in the example below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"val processor = \n  MessageProcessor\n    .init[IO]\n    .enrich(_.logged)\n    .enrich(_.asJsonConsumer[String])\n    .transacted(runEffect)\n    .bindBroker(broker)\n\nprocessor.handle(Destinations.destinationA)(MyProcessor.instanceA[AppEffect])\nprocessor.handle(Destinations.destinationB)(MyProcessor.instanceB[AppEffect])\n")))}d.isMDXComponent=!0}}]);