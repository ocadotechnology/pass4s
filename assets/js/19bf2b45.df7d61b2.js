"use strict";(self.webpackChunkpass4s=self.webpackChunkpass4s||[]).push([[391],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>y});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),m=o,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return r?t.createElement(y,a(a({ref:n},p),{},{components:r})):t.createElement(y,a({ref:n},p))}));function y(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=r[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1594:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var t=r(7462),o=(r(7294),r(3905));const s={sidebar_position:2,description:"Using S3 proxy for large messages"},a="S3 Proxy",i={unversionedId:"modules/s3proxy",id:"modules/s3proxy",title:"S3 Proxy",description:"Using S3 proxy for large messages",source:"@site/../mdoc/target/mdoc/modules/s3proxy.md",sourceDirName:"modules",slug:"/modules/s3proxy",permalink:"/pass4s/docs/modules/s3proxy",draft:!1,editUrl:"https://github.com/ocadotechnology/pass4s/edit/main/docs/modules/s3proxy.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Using S3 proxy for large messages"},sidebar:"sidebar",previous:{title:"Message processor",permalink:"/pass4s/docs/modules/message-processor"},next:{title:"Migration guide",permalink:"/pass4s/docs/migration-guide"}},l={},c=[],p={toc:c},u="wrapper";function d(e){let{components:n,...r}=e;return(0,o.kt)(u,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"s3-proxy"},"S3 Proxy"),(0,o.kt)("p",null,"Some messaging solutions like SNS/SQS limit the size of the message you can send. S3 proxy solves this particular problem by sending the original payload to S3 bucket and exchaning the pointer to the S3 object on the messanging channel.  "),(0,o.kt)("p",null,"The example below roughly shows how to use the S3 proxy on both consumer and sender."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val senderConfig =\n  S3ProxyConfig\n    .Sender\n    .withSnsDefaults(bucketName)\n    // .copy(\n    //   minPayloadSize = Some(0) // You can use custom payload size\n    // )\nval consumerConfig =\n  S3ProxyConfig\n    .Consumer\n    .withSnsDefaults()\n    .copy(\n      shouldDeleteAfterProcessing = true // it doesn\'t by default, just in case there\'s more listeners\n    )\nval broker = ??? // let\'s just assume you already instantiated broker\nval payload = Message.Payload("body", Map("foo" -> "bar"))\n\nval sender = \n  broker\n    .sender\n    .usingS3Proxy(senderConfig)\nval consumer = \n  broker\n    .consumer(SqsEndpoint(SqsUrl(queueUrl)))\n    .usingS3Proxy(consumerConfig)\n\n// no need to know anything about s3 when sending the actual message\nval sendMessageOnTopic = sender.sendOne(Message(payload, SnsDestination(SnsArn(topicArn))).widen)\n')))}d.isMDXComponent=!0}}]);